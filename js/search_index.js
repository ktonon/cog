var search_data = {"index":{"searchIndex":["cog","config","cogfile","cogfileerror","errors","missingtemplate","generator","spechelpers","invocation","matchers","matchmaker","runner","tool","object","active_fixture_dir()","before()","cog_directory()","cogfile_path()","complain()","copy_if_missing()","create()","create()","do_something()","find()","generator()","get_template()","initialize_project()","instance()","language()","list()","list()","make()","match_maker()","message()","message()","message()","new()","new()","new()","output()","project?()","project_generators_path()","project_source_path()","project_templates_path()","run()","run()","show_help()","spec_root()","stamp()","template_paths()","test()","tool()","touch_path()","trace()","use_fixture()","api"],"longSearchIndex":["cog","cog::config","cog::config::cogfile","cog::config::cogfileerror","cog::errors","cog::errors::missingtemplate","cog::generator","cog::spechelpers","cog::spechelpers::invocation","cog::spechelpers::matchers","cog::spechelpers::matchers::matchmaker","cog::spechelpers::runner","cog::tool","object","cog::spechelpers#active_fixture_dir()","cog::spechelpers::matchers::matchmaker#before()","cog::spechelpers#cog_directory()","cog::spechelpers#cogfile_path()","cog::spechelpers::matchers#complain()","cog::generator#copy_if_missing()","cog::generator::create()","cog::tool::create()","cog::spechelpers::matchers#do_something()","cog::tool::find()","cog::spechelpers#generator()","cog::generator#get_template()","cog::initialize_project()","cog::config::instance()","cog::config::cogfile#language()","cog::generator::list()","cog::tool::list()","cog::spechelpers::matchers#make()","cog::spechelpers::matchers#match_maker()","cog::config::cogfileerror#message()","cog::errors::missingtemplate#message()","cog::spechelpers::matchers::matchmaker#message()","cog::config::new()","cog::errors::missingtemplate::new()","cog::spechelpers::runner::new()","cog::spechelpers::matchers#output()","cog::config#project?()","cog::config::cogfile#project_generators_path()","cog::config::cogfile#project_source_path()","cog::config::cogfile#project_templates_path()","cog::generator::run()","cog::spechelpers::runner#run()","cog::spechelpers::matchers#show_help()","cog::spechelpers#spec_root()","cog::generator#stamp()","cog::config#template_paths()","cog::spechelpers::matchers::matchmaker#test()","cog::spechelpers#tool()","cog::generator#touch_path()","cog::spechelpers::matchers::matchmaker#trace()","cog::spechelpers#use_fixture()",""],"info":[["Cog","","Cog.html","","<p>The static methods on this top level module mirror the commands available\nto the <code>cog</code> command line utility. …\n"],["Cog::Config","","Cog/Config.html","","<p>This is a low level interface. It is mainly used by the Generator methods\nto determine where to find …\n"],["Cog::Config::Cogfile","","Cog/Config/Cogfile.html","","<p>In your project’s <code>Cogfile</code>, <code>self</code> has been set to\nan instance of this class.\n<p>Example Cogfile\n\n<pre>project_generators_path ...</pre>\n"],["Cog::Config::CogfileError","","Cog/Config/CogfileError.html","","<p>For wrapping errors which occur during the processing of a\n<code>Cogfile</code>.\n"],["Cog::Errors","","Cog/Errors.html","",""],["Cog::Errors::MissingTemplate","","Cog/Errors/MissingTemplate.html","","<p>Indiciates an attempt to use a non-existant template.\n"],["Cog::Generator","","Cog/Generator.html","","<p>This module defines an interface which can be used by generator objects.\nSpecifically, it makes it easy …\n"],["Cog::SpecHelpers","","Cog/SpecHelpers.html","","<p>Modules and classes to help write specs for testing <code>cog</code>\n<p>Example\n<p>Requiring the helpers will make extra  …\n"],["Cog::SpecHelpers::Invocation","","Cog/SpecHelpers/Invocation.html","","<p>Represents a <code>cog</code> command line invocation, which can be tested\nwith <code>RSpec</code> <code>should</code> and <code>should_not</code>\ncustom …\n"],["Cog::SpecHelpers::Matchers","","Cog/SpecHelpers/Matchers.html","","<p>Extra should or should_not matchers for RSpec. Check out #match_maker for\nhelp writing new matchers. …\n"],["Cog::SpecHelpers::Matchers::MatchMaker","","Cog/SpecHelpers/Matchers/MatchMaker.html","","<p>Within Matchers#match_maker blocks, <code>self</code> is set to an instance\nof this class.\n"],["Cog::SpecHelpers::Runner","","Cog/SpecHelpers/Runner.html","","<p>Points to the <code>cog</code> command-line app\n"],["Cog::Tool","","Cog/Tool.html","","<p>For more details on writing tools see github.com/ktonon/cog#tools\n"],["Object","","Object.html","",""],["active_fixture_dir","Cog::SpecHelpers","Cog/SpecHelpers.html#method-i-active_fixture_dir","()","<p>Directory of an active spec fixture.\n"],["before","Cog::SpecHelpers::Matchers::MatchMaker","Cog/SpecHelpers/Matchers/MatchMaker.html#method-i-before","(&block)","<p>Define a block which runs before the Invocation.\n<p>This is not required, but can be used to save context …\n"],["cog_directory","Cog::SpecHelpers","Cog/SpecHelpers.html#method-i-cog_directory","()","<p>Path to the cog directory in the active spec fixture\n"],["cogfile_path","Cog::SpecHelpers","Cog/SpecHelpers.html#method-i-cogfile_path","()","<p>Path to the Cogfile in the active spec fixture\n"],["complain","Cog::SpecHelpers::Matchers","Cog/SpecHelpers/Matchers.html#method-i-complain","()","<p>The target Invocation should write something to STDERR, indicating an error\n"],["copy_if_missing","Cog::Generator","Cog/Generator.html#method-i-copy_if_missing","(src, dest)","<p>Copy a file from <code>src</code> to <code>dest</code>, but only if\n<code>dest</code> does not already exist.\n"],["create","Cog::Generator","Cog/Generator.html#method-c-create","(name, opt={})","<p>Create a new generator\n<p>Arguments\n<p><code>name</code> - the name to use for the new generator\n"],["create","Cog::Tool","Cog/Tool.html#method-c-create","(name)","<p>Generate a new tool with the given name\n<p>Returns\n<p>Whether or not the generator was created successfully\n"],["do_something","Cog::SpecHelpers::Matchers","Cog/SpecHelpers/Matchers.html#method-i-do_something","()","<p>The target Invocation should do something, as determined by standard output\n"],["find","Cog::Tool","Cog/Tool.html#method-c-find","(name)","<p>Find an available tool with the given name\n<p>Returns\n<p>A fully qualified tool path, which can be required\n"],["generator","Cog::SpecHelpers","Cog/SpecHelpers.html#method-i-generator","(name)","<p>Path to the generator with the given name\n"],["get_template","Cog::Generator","Cog/Generator.html#method-i-get_template","(path, opt={})","<p>Get the template with the given name.\n<p>Parameters\n<p><code>path</code> - a path to a template file which is relative to …\n"],["initialize_project","Cog","Cog.html#method-c-initialize_project","()","<p>Prepare the project in the present working directory for use with\n<code>cog</code>\n"],["instance","Cog::Config","Cog/Config.html#method-c-instance","()","<p>The singleton instance.\n<p>Initialized using the Cogfile for the current project, if any can be found.\nIf …\n"],["language","Cog::Config::Cogfile","Cog/Config/Cogfile.html#method-i-language","(lang)","<p>Define the default language in which to generated application source code\n<p>Arguments\n<p><code>lang</code> - A code for the …\n"],["list","Cog::Generator","Cog/Generator.html#method-c-list","(verbose=false)","<p>A list of available project generators\n"],["list","Cog::Tool","Cog/Tool.html#method-c-list","(verbose=false)","<p>A list of available tools\n"],["make","Cog::SpecHelpers::Matchers","Cog/SpecHelpers/Matchers.html#method-i-make","(path)","<p>The target Invocation should create a <code>Cogfile</code> where none\nexisted before\n"],["match_maker","Cog::SpecHelpers::Matchers","Cog/SpecHelpers/Matchers.html#method-i-match_maker","(&block)","<p>Makes it easy to write RSpec matchers\n<p>Here is how the matcher for Matchers#show_help is written using …\n"],["message","Cog::Config::CogfileError","Cog/Config/CogfileError.html#method-i-message","()",""],["message","Cog::Errors::MissingTemplate","Cog/Errors/MissingTemplate.html#method-i-message","()",""],["message","Cog::SpecHelpers::Matchers::MatchMaker","Cog/SpecHelpers/Matchers/MatchMaker.html#method-i-message","(&block)","<p>Define a block which runs after a test fails and should return a failure\nmessage template.\n<p>The template …\n"],["new","Cog::Config","Cog/Config.html#method-c-new","()",""],["new","Cog::Errors::MissingTemplate","Cog/Errors/MissingTemplate.html#method-c-new","(template_path)",""],["new","Cog::SpecHelpers::Runner","Cog/SpecHelpers/Runner.html#method-c-new","(path_to_cl_app)",""],["output","Cog::SpecHelpers::Matchers","Cog/SpecHelpers/Matchers.html#method-i-output","(x)","<p>The target Invocation should write the given list of lines to standard\noutput\n"],["project?","Cog::Config","Cog/Config.html#method-i-project-3F","()","<p>Are we operating in the context of a project? That is, could a Cogfile be\nfound?\n"],["project_generators_path","Cog::Config::Cogfile","Cog/Config/Cogfile.html#method-i-project_generators_path","(path, absolute=false)","<p>Define the directory in which to find project generators\n<p>Arguments\n<p><code>path</code> - A file system path\n"],["project_source_path","Cog::Config::Cogfile","Cog/Config/Cogfile.html#method-i-project_source_path","(path, absolute=false)","<p>Define the directory to which project source code is generated\n<p>Arguments\n<p><code>path</code> - A file system path\n"],["project_templates_path","Cog::Config::Cogfile","Cog/Config/Cogfile.html#method-i-project_templates_path","(path, absolute=false)","<p>Define the directory in which to find custom project templates\n<p>Arguments\n<p><code>path</code> - A file system path\n"],["run","Cog::Generator","Cog/Generator.html#method-c-run","(name, opt={})","<p>Run the generator with the given name\n<p>Arguments\n<p><code>name</code> - the name of the generator\n"],["run","Cog::SpecHelpers::Runner","Cog/SpecHelpers/Runner.html#method-i-run","(*args)","<p>Run cog with the given arguments\n<p>Returns\n<p>An instance of Invocation configured with the arguments. Use should …\n"],["show_help","Cog::SpecHelpers::Matchers","Cog/SpecHelpers/Matchers.html#method-i-show_help","()","<p>The target Invocation should output the default help text\n"],["spec_root","Cog::SpecHelpers","Cog/SpecHelpers.html#method-i-spec_root","()","<p>Absolute path to the root spec directory\n"],["stamp","Cog::Generator","Cog/Generator.html#method-i-stamp","(template_path, destination, opt={})","<p>Stamp a template <code>source</code> onto a <code>destination</code>.\n<p>Arguments\n<p><code>template_path</code> - a path to a template file which is …\n"],["template_paths","Cog::Config","Cog/Config.html#method-i-template_paths","()","<p>A list of directories in which to find ERB template files. Priority should\nbe given first to last.\n"],["test","Cog::SpecHelpers::Matchers::MatchMaker","Cog/SpecHelpers/Matchers/MatchMaker.html#method-i-test","(&block)","<p>Define the test which runs after the Invocation\n<p>This can make use of instance variables set during #before …\n"],["tool","Cog::SpecHelpers","Cog/SpecHelpers.html#method-i-tool","(name)","<p>Path to the test tool with the given name\n"],["touch_path","Cog::Generator","Cog/Generator.html#method-i-touch_path","(*path_components)","<p>Recursively create directories in the given path if they are missing.\n"],["trace","Cog::SpecHelpers::Matchers::MatchMaker","Cog/SpecHelpers/Matchers/MatchMaker.html#method-i-trace","()",""],["use_fixture","Cog::SpecHelpers","Cog/SpecHelpers.html#method-i-use_fixture","(name)","<p>The next cog spec will execute in a fresh copy of the given fixture\ndirectory. Fixture directories are …\n"],["API","","API_rdoc.html","","<p>cog API Docs\n<p><code>cog</code> is a command line tool which helps you write code\ngenerators.\n<p>This is the API docs. For …\n"]]}}