var search_data = {"index":{"searchIndex":["cog","cogfile","cogfileerror","config","errors","missingtemplate","meta","gengen","mirrorgen","mixins","mirror","usestemplates","spechelpers","app","invocation","matchers","object","abstract_classname()","app_dir()","classname()","cog_dir()","filename()","for_project()","generated_warning()","get_template()","include_guard_begin()","include_guard_end()","included()","language()","message()","message()","namespace_begin()","namespace_end()","new()","new()","new()","run()","show_help()","snippet_extension()","stamp()","stamp()","stamp_generator()","stamp_module()","api"],"longSearchIndex":["cog","cog::cogfile","cog::cogfileerror","cog::config","cog::errors","cog::errors::missingtemplate","cog::meta","cog::meta::gengen","cog::meta::mirrorgen","cog::mixins","cog::mixins::mirror","cog::mixins::usestemplates","cog::spechelpers","cog::spechelpers::app","cog::spechelpers::invocation","cog::spechelpers::matchers","object","cog::meta::mirrorgen#abstract_classname()","cog::cogfile#app_dir()","cog::meta::mirrorgen#classname()","cog::cogfile#cog_dir()","cog::meta::mirrorgen#filename()","cog::config::for_project()","cog::mixins::usestemplates#generated_warning()","cog::mixins::usestemplates#get_template()","cog::mixins::usestemplates#include_guard_begin()","cog::mixins::usestemplates#include_guard_end()","cog::mixins::mirror::included()","cog::cogfile#language()","cog::cogfileerror#message()","cog::errors::missingtemplate#message()","cog::mixins::usestemplates#namespace_begin()","cog::mixins::usestemplates#namespace_end()","cog::config::new()","cog::meta::mirrorgen::new()","cog::spechelpers::app::new()","cog::spechelpers::app#run()","cog::spechelpers::matchers#show_help()","cog::mixins::usestemplates#snippet_extension()","cog::meta::mirrorgen#stamp()","cog::mixins::usestemplates#stamp()","cog::meta::gengen#stamp_generator()","cog::meta::gengen#stamp_module()",""],"info":[["Cog","","Cog.html","",""],["Cog::Cogfile","","Cog/Cogfile.html","","<p>In your project’s <code>Cogfile</code>, <code>self</code> has been set to\nan instance of this class.\n<p>Example Cogfile\n\n<pre>cog_dir 'cog' ...</pre>\n"],["Cog::CogfileError","","Cog/CogfileError.html","","<p>For wrapping errors which occur during the processing of a\n<code>Cogfile</code>.\n"],["Cog::Config","","Cog/Config.html","","<p>This interface is intended for use within generators. Instances of this\ntype are initialized via Cogfile …\n"],["Cog::Errors","","Cog/Errors.html","",""],["Cog::Errors::MissingTemplate","","Cog/Errors/MissingTemplate.html","","<p>Indiciates an attempt to use a non-existant template.\n"],["Cog::Meta","","Cog/Meta.html","","<p>Used by cog internals.\n"],["Cog::Meta::GenGen","","Cog/Meta/GenGen.html","","<p>An abstract generator generator.\n<p>Subclasses define generators which make other generators.\n"],["Cog::Meta::MirrorGen","","Cog/Meta/MirrorGen.html","","<p>Generates a Cog::Mixins::Mirror and associated templates.\n"],["Cog::Mixins","","Cog/Mixins.html","","<p>Modules that extend your code generating classes with helper methods.\n<p>Mixins::UsesTemplates - methods …\n"],["Cog::Mixins::Mirror","","Cog/Mixins/Mirror.html","","<p>Code the interface in Ruby and implement in the target langauge.\n<p><strong>Not implemented</strong>\n<p>Example\n"],["Cog::Mixins::UsesTemplates","","Cog/Mixins/UsesTemplates.html","","<p>Mixin for classes that can use templates to generate code\n"],["Cog::SpecHelpers","","Cog/SpecHelpers.html","","<p>Modules and classes to help write specs for testing <code>cog</code>\n<p>Example\n<p>Requiring the helpers will make extra  …\n"],["Cog::SpecHelpers::App","","Cog/SpecHelpers/App.html","","<p>Points to the <code>cog</code> command-line app\n"],["Cog::SpecHelpers::Invocation","","Cog/SpecHelpers/Invocation.html","","<p>Represents a <code>cog</code> command line invocation, which can be tested\nwith <code>RSpec</code> <code>should</code> and <code>should_not</code>\ncustom …\n"],["Cog::SpecHelpers::Matchers","","Cog/SpecHelpers/Matchers.html","","<p>Extra should or should_not matchers for RSpec.\n"],["Object","","Object.html","",""],["abstract_classname","Cog::Meta::MirrorGen","Cog/Meta/MirrorGen.html#method-i-abstract_classname","()",""],["app_dir","Cog::Cogfile","Cog/Cogfile.html#method-i-app_dir","(path, absolute=false)","<p>Define the directory in which to place generated application source code.\n<p>Arguments\n<p><code>path</code> - A file system …\n"],["classname","Cog::Meta::MirrorGen","Cog/Meta/MirrorGen.html#method-i-classname","()",""],["cog_dir","Cog::Cogfile","Cog/Cogfile.html#method-i-cog_dir","(path, absolute=false)","<p>Define the directory in which to place Ruby generators and <code>ERB</code>\ntemplates.\n<p>Arguments\n<p><code>path</code> - A file system …\n"],["filename","Cog::Meta::MirrorGen","Cog/Meta/MirrorGen.html#method-i-filename","()",""],["for_project","Cog::Config","Cog/Config.html#method-c-for_project","()","<p>The default configuration for the project.\n<p>Initialized using the <code>Cogfile</code> for the current project. The …\n"],["generated_warning","Cog::Mixins::UsesTemplates","Cog/Mixins/UsesTemplates.html#method-i-generated_warning","()","<p>A warning that indicates a file is maintained by a generator\n"],["get_template","Cog::Mixins::UsesTemplates","Cog/Mixins/UsesTemplates.html#method-i-get_template","(path, opt={})","<p>Get the template with the given name.\n<p>Parameters\n<p><code>path</code> - a path to a template file which is relative to …\n"],["include_guard_begin","Cog::Mixins::UsesTemplates","Cog/Mixins/UsesTemplates.html#method-i-include_guard_begin","(name)",""],["include_guard_end","Cog::Mixins::UsesTemplates","Cog/Mixins/UsesTemplates.html#method-i-include_guard_end","()",""],["included","Cog::Mixins::Mirror","Cog/Mixins/Mirror.html#method-c-included","(base)",""],["language","Cog::Cogfile","Cog/Cogfile.html#method-i-language","(lang)","<p>Define the default language in which to generated application source code.\n<p>Arguments\n<p><code>lang</code> - A code for …\n"],["message","Cog::CogfileError","Cog/CogfileError.html#method-i-message","()",""],["message","Cog::Errors::MissingTemplate","Cog/Errors/MissingTemplate.html#method-i-message","()",""],["namespace_begin","Cog::Mixins::UsesTemplates","Cog/Mixins/UsesTemplates.html#method-i-namespace_begin","(name)",""],["namespace_end","Cog::Mixins::UsesTemplates","Cog/Mixins/UsesTemplates.html#method-i-namespace_end","(name)",""],["new","Cog::Config","Cog/Config.html#method-c-new","(path)","<p>Initialize from a <code>Cogfile</code> at the given path.\n<p>Arguments\n<p><code>path</code> - A file system path to a <code>Cogfile</code>. The file\n…\n"],["new","Cog::Meta::MirrorGen","Cog/Meta/MirrorGen.html#method-c-new","(name, opt={})","<p>Create a mirror generator\n<p>Parameters\n<p><code>name</code> - the name of the mirror. Will be forced to singular\nform.\n"],["new","Cog::SpecHelpers::App","Cog/SpecHelpers/App.html#method-c-new","(path_to_cl_app)",""],["run","Cog::SpecHelpers::App","Cog/SpecHelpers/App.html#method-i-run","(*args)","<p>Run cog with the given arguments\n<p>Returns\n<p>An instance of Invocation configured with the arguments. Use should …\n"],["show_help","Cog::SpecHelpers::Matchers","Cog/SpecHelpers/Matchers.html#method-i-show_help","()","<p>The target Invocation should output the default help text\n"],["snippet_extension","Cog::Mixins::UsesTemplates","Cog/Mixins/UsesTemplates.html#method-i-snippet_extension","(lang = 'text')","<p>File extension for a snippet of the given source code language.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">snippet_extension</span> <span class=\"ruby-string\">'c++'</span> <span class=\"ruby-comment\"># =&gt; 'h'</span>\n</pre>\n"],["stamp","Cog::Meta::MirrorGen","Cog/Meta/MirrorGen.html#method-i-stamp","(opt={})",""],["stamp","Cog::Mixins::UsesTemplates","Cog/Mixins/UsesTemplates.html#method-i-stamp","(path, opt={})","<p>Stamp this object using the template at the given path.\n<p>Parameters\n<p><code>path</code> - to the template which is relative …\n"],["stamp_generator","Cog::Meta::GenGen","Cog/Meta/GenGen.html#method-i-stamp_generator","(ruby_template, generator_name, opt={})","<p>Create a ruby generator from a template.\n<p>Parameters\n<p><code>ruby_template</code> - name of the ruby template. This is …\n"],["stamp_module","Cog::Meta::GenGen","Cog/Meta/GenGen.html#method-i-stamp_module","(source_template, module_name, opt={})","<p>Create an app module template from a template.\n<p>Parameters\n<p><code>source_template</code> - name of the source template. …\n"],["API","","API_rdoc.html","","<p>Please see github.com/ktonon/cog#readme for a general introduction.\n"]]}}