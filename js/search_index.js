var search_data = {"index":{"searchIndex":["cog","cogfileerror","config","errors","missingtemplate","mixins","mirror","usestemplates","spechelpers","app","invocation","matchers","templatecontroller","object","app_dir()","cog_dir()","for_project()","gem_dir()","generator_dir()","get_template()","included()","message()","message()","new()","new()","routes_path()","run()","show_help()","stamp()","stamp_generator()","stamp_module()","template_dir()","api"],"info":[["Cog","","Cog.html","",""],["Cog::CogfileError","","Cog/CogfileError.html","","<p>For wrapping errors which occur during the processing of a\n<code>Cogfile</code>.\n"],["Cog::Config","","Cog/Config.html","","<p>When the <code>Cogfile</code> is processed, <code>self</code> will be the\nsingleton instance of this object.\n"],["Cog::Errors","","Cog/Errors.html","",""],["Cog::Errors::MissingTemplate","","Cog/Errors/MissingTemplate.html","","<p>Indiciates an attempt to use a non-existant template.\n"],["Cog::Mixins","","Cog/Mixins.html","","<p>Modules that extend your code generating classes with helper methods.\n<p>Mixins::UsesTemplates - methods …\n"],["Cog::Mixins::Mirror","","Cog/Mixins/Mirror.html","","<p>Code the interface in Ruby and implement in the target langauge.\n<p><strong>Not implemented</strong>\n<p>Example\n"],["Cog::Mixins::UsesTemplates","","Cog/Mixins/UsesTemplates.html","","<p>Mixin for classes that can use templates to generate code\n"],["Cog::SpecHelpers","","Cog/SpecHelpers.html","","<p>Modules and classes to help write specs for testing <code>cog</code>\n<p>Example\n<p>Requiring the helpers will make extra  …\n"],["Cog::SpecHelpers::App","","Cog/SpecHelpers/App.html","","<p>Points to the <code>cog</code> command-line app\n"],["Cog::SpecHelpers::Invocation","","Cog/SpecHelpers/Invocation.html","","<p>Represents a <code>cog</code> command line invocation, which can be tested\nwith <code>RSpec</code> <code>should</code> and <code>should_not</code>\ncustom …\n"],["Cog::SpecHelpers::Matchers","","Cog/SpecHelpers/Matchers.html","","<p>Extra should or should_not matchers for RSpec.\n"],["Cog::TemplateController","","Cog/TemplateController.html","",""],["Object","","Object.html","",""],["app_dir","Cog::Config","Cog/Config.html#method-i-app_dir","(val=nil, opt={})","<p>The directory in which to place generated application code.\n<p>Can be used as a getter, or a setter within …\n"],["cog_dir","Cog::Config","Cog/Config.html#method-i-cog_dir","(val=nil, opt={})","<p>The directory in which to place Ruby generators and <code>ERB</code>\ntemplates.\n<p>Can be used as a getter, or a setter …\n"],["for_project","Cog::Config","Cog/Config.html#method-c-for_project","()","<p>Loads the default <code>Cogfile</code> for the current project.\n<p>The <code>Cogfile</code> will be looked for in the present working …\n"],["gem_dir","Cog::Config","Cog/Config.html#method-c-gem_dir","()","<p>Location of the installed gem\n"],["generator_dir","Cog::Config","Cog/Config.html#method-i-generator_dir","(val=nil, opt={})","<p>The directory in which to find Ruby source files. These are files which\ncontrol exactly how the code …\n"],["get_template","Cog::Mixins::UsesTemplates","Cog/Mixins/UsesTemplates.html#method-i-get_template","(path, opt={})","<p>Get the template with the given name.\n<p>Parameters\n<p><code>path</code> - a path to a template file which is relative to …\n"],["included","Cog::Mixins::Mirror","Cog/Mixins/Mirror.html#method-c-included","(base)",""],["message","Cog::CogfileError","Cog/CogfileError.html#method-i-message","()",""],["message","Cog::Errors::MissingTemplate","Cog/Errors/MissingTemplate.html#method-i-message","()",""],["new","Cog::Config","Cog/Config.html#method-c-new","(path)","<p>Initialize from a <code>Cogfile</code> at the given path.\n"],["new","Cog::SpecHelpers::App","Cog/SpecHelpers/App.html#method-c-new","(path_to_cl_app)",""],["routes_path","Cog::Config","Cog/Config.html#method-i-routes_path","()","<p>The path to the routes file which maps defines how generators map to\ngenerated application code.\n"],["run","Cog::SpecHelpers::App","Cog/SpecHelpers/App.html#method-i-run","(*args)","<p>Run cog with the given arguments\n<p>Returns\n<p>An instance of Invocation configured with the arguments. Use should …\n"],["show_help","Cog::SpecHelpers::Matchers","Cog/SpecHelpers/Matchers.html#method-i-show_help","()","<p>The target Invocation should output the default help text\n"],["stamp","Cog::Mixins::UsesTemplates","Cog/Mixins/UsesTemplates.html#method-i-stamp","(path, opt={})","<p>Stamp this object using the template at the given path.\n<p>Parameters\n<p><code>path</code> - to the template which is relative …\n"],["stamp_generator","Cog::TemplateController","Cog/TemplateController.html#method-i-stamp_generator","(ruby_template, generator_name, opt={})","<p>Create a ruby generator from a template.\n<p>Parameters\n<p><code>ruby_template</code> - name of the ruby template. This is …\n"],["stamp_module","Cog::TemplateController","Cog/TemplateController.html#method-i-stamp_module","(source_template, module_name, opt={})","<p>Create an app module template from a template.\n<p>Parameters\n<p><code>source_template</code> - name of the source template. …\n"],["template_dir","Cog::Config","Cog/Config.html#method-i-template_dir","(val=nil, opt={})","<p>The directory in which to find ERB template files.\n"],["API","","API_rdoc.html","","<p>cog API docs\n<p><code>cog</code> is a command line utility that makes it a bit easier to\norganize a project which uses …\n"]],"longSearchIndex":["cog","cog::cogfileerror","cog::config","cog::errors","cog::errors::missingtemplate","cog::mixins","cog::mixins::mirror","cog::mixins::usestemplates","cog::spechelpers","cog::spechelpers::app","cog::spechelpers::invocation","cog::spechelpers::matchers","cog::templatecontroller","object","cog::config#app_dir()","cog::config#cog_dir()","cog::config::for_project()","cog::config::gem_dir()","cog::config#generator_dir()","cog::mixins::usestemplates#get_template()","cog::mixins::mirror::included()","cog::cogfileerror#message()","cog::errors::missingtemplate#message()","cog::config::new()","cog::spechelpers::app::new()","cog::config#routes_path()","cog::spechelpers::app#run()","cog::spechelpers::matchers#show_help()","cog::mixins::usestemplates#stamp()","cog::templatecontroller#stamp_generator()","cog::templatecontroller#stamp_module()","cog::config#template_dir()",""]}}