#!/usr/bin/env ruby
require 'gli'
$LOAD_PATH << File.join(File.dirname(__FILE__), '..', 'lib')
require 'cog'
require 'active_support/core_ext'
require 'fileutils'
require 'rainbow'

include GLI::App

program_desc 'This is a utility to help you write code generators.'

desc 'Current version of cog'
version Cog::VERSION

desc 'Output more detailed information when running a command'
switch [:verbose]

desc 'Set the Cogfile explicitly'
arg_name 'path'
flag :cogfile

desc 'Set the active tool'
arg_name 'name'
default_value 'basic'
flag [:tool, :t]

desc 'Suppress the use of color in output'
switch :colorless

desc 'Add cog to the project in the present working directory'
command :init do |c|

  c.action do |gopt, opt, args|
    Cog.initialize_project
  end
end

desc 'Manage project generators'
command [:generator, :gen] do |c|
  
  c.default_command :run
  
  c.desc 'List project generators'
  c.command :list do |sub|
    sub.action do |gopt, opt, args|
      x = Cog::Controllers::GeneratorController.list :verbose => gopt[:v]
      puts x.join "\n" unless x.empty?
    end
  end
  
  c.desc 'Create a new project generator'
  c.arg_name 'name'
  c.command :new do |sub|
    sub.desc 'Specify a target language other than the default'
    sub.default_value 'in Cogfile'
    sub.flag [:language, :l]
    
    sub.action do |gopt, opt, args|
      args.each do |name|
        if opt[:language] && opt[:language] != 'in Cogfile'
          lang = Cog::Languages.get_language opt[:language]
          Cog::Config.instance.target_language = lang
        end
        Cog::Controllers::GeneratorController.create name
      end
    end
  end
  
  c.desc 'Run project generators'
  c.long_desc 'Omit generator name to run all of them'
  c.arg_name 'name'
  c.command :run do |sub|
    sub.action do |gopt, opt, args|
      raise Cog::Errors::ActionRequiresProject.new('run generator') unless Cog::Config.instance.project?
      Cog::Directives.gather_from_project
      args = Cog::Controllers::GeneratorController.list if args.empty?
      args.each do |name|
        Cog::Controllers::GeneratorController.run name
      end
    end
  end
end

desc 'List or create DSLs known as cog tools'
command :tool do |c|
  
  c.default_command :list
  
  c.desc 'List the available tools'
  c.command :list do |sub|
    sub.action do |gopt, opt, args|
      x = Cog::Controllers::ToolController.list :verbose => gopt[:verbose]
      puts x.join "\n" unless x.empty?
    end
  end
  
  c.desc 'Create a new tool'
  c.arg_name 'tool_name'
  c.command :new do |sub|
    sub.action do |gopt, opt, args|
      args.each do |name|
        Cog::Controllers::ToolController.create name
      end
    end
  end
end

desc 'Manage templates'
command [:template, :tm] do |c|
  
  c.default_command :list
  
  c.desc 'List the available templates'
  c.command :list do |sub|
    sub.action do |gopt, opt, args|
      x = Cog::Controllers::TemplateController.list :verbose => gopt[:verbose]
      puts x.join "\n" unless x.empty?
    end
  end
  
  c.desc 'Create a new project template'
  c.command :new do |sub|
    sub.desc 'Force override of existing built-in or tool templates'
    sub.switch ['force-override', :f]
    
    sub.action do |gopt, opt, args|
      args.each do |name|
        begin
          Cog::Controllers::TemplateController.create name, :force_override => opt[:f]
        rescue Cog::Errors::DuplicateTemplate => e
          STDERR.write "Use --force-override to copy the original template into your project templates\n"
          raise
        end
      end
    end
  end
end

desc 'Review supported languages'
command [:language, :lang] do |c|
  
  c.default_command :list
  
  c.desc 'List the supported languages'
  c.command :list do |sub|
    sub.action do
      summary = Cog::Config.instance.language_summary
      w = summary.collect {|info| info.name.length}.max
      summary.each do |info|
        puts info.to_s(w)
      end
    end
  end
  
end

pre do |gopt, command, opt, args|
  Sickill::Rainbow.enabled = false if gopt[:colorless]
  if gopt[:cogfile] && !File.exists?(gopt[:cogfile])
    STDERR.write "No such Cogfile at #{gopt[:cogfile]}\n"
    false
  else
    Cog::Config.instance = Cog::Config.new gopt[:cogfile] if gopt[:cogfile]
    unless command.name == :init
      Cog::Config.instance.register_tools
      Cog::Config.instance.activate_tool gopt[:tool]
    end
    true
  end
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
