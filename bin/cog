#!/usr/bin/env ruby
require 'gli'
$LOAD_PATH << File.join(File.dirname(__FILE__), '..', 'lib')
require 'cog'
require 'active_support/core_ext'
require 'fileutils'
require 'rainbow'

include GLI::App

program_desc 'This is a utility to help you write code generators.'

# version Cog::VERSION
desc 'Output more detailed information when running a command'
switch :v

desc 'Add cog to the project in the present working directory'
skips_pre
command :init do |c|

  c.action do |global_options, options, args|
    Cog.initialize_project
  end
end

desc 'Create a generator (or leave name blank to list project generators)'
arg_name 'name'
command [:generator, :gen] do |c|
  
  c.desc 'which tool to use to create the generator'
  c.arg_name 'tool_name'
  c.default_value 'basic'
  c.flag :tool
  
  c.action do |global_options, options, args|
    if args.empty?
      # List
      x = Cog::Generator.list global_options[:v]
      puts x.join "\n" unless x.empty?
    else
      # Create
      args.each do |name|
        Cog::Generator.create name, :tool => options[:tool], :verbose => global_options[:v]
      end
    end
  end
end

desc 'Create a tool (or leave name blank to list available tools)'
arg_name 'name'
skips_pre
command :tool do |c|

  c.action do |global_options, options, args|
    if args.empty?
      # List
      x = Cog::Tool.list global_options[:v]
      puts x.join "\n" unless x.empty?
    else
      # Create
      args.each do |name|
        Cog::Tool.create name
      end
    end
  end
end

desc 'Run generators in the current project'
arg_name 'generator_name'
command :run do |c|
  
  c.action do |global_options, options, args|
    args = Cog::Generator.list if args.empty?
    args.each do |name|
      Cog::Generator.run name, :verbose => global_options[:v]
    end
  end
end

desc 'List supported languages'
skips_pre
command :languages do |c|

  c.action do
    puts 'c++'
  end
end

pre do |global_options, command, options, args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  unless Cog::Config.instance.project?
    STDERR.write "No Cogfile could be found\n".color(:red)
    STDOUT.write "Run `cog init` to prepare a project for use with cog\n"
    false
  else
    true
  end
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

begin
  exit run(ARGV)
rescue
  # Don't show stack traces during normal use
  raise unless ENV['COG_DEBUG'].nil? || /^(|0|false|no|off)$/i =~ ENV['COG_DEBUG']
end
