#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'active_support/core_ext'
require 'cog'
require 'cog_version'
require 'gli'
require 'fileutils'

include GLI::App

program_desc 'This is a utility to help you write code generators.'

version Cog::VERSION

desc 'Write extra information'
switch [:v,:verbose]

desc 'Add cog to a project by generating a Cogfile in the current directory'
command :init do |c|
  c.action do |g,o,a|
    puts "Generated Cogfile"
    FileUtils.cp File.join(Cog::Config.gem_dir, 'Default.cogfile'), 'Cogfile'
  end
end

# desc 'Create a new mirror class'
# arg_name 'ClassName'
# command :mirror do |c|
#   c.desc 'The target language (see languages command)'
#   c.arg_name 'language'
#   c.flag [:language, :l]
#   
#   c.desc 'Slash (/) separated prefix for generator, templates, and app code'
#   c.arg_name 'path'
#   c.flag [:package, :p]
# 
#   c.action do |g,opt,a|
#     a.each do |class_name|
#       mirror_gen = Cog::Meta::MirrorGen.new class_name
#       mirror_gen.stamp opt
#     end
#   end
# end

desc 'List supported languages'
command :languages do |c|
  c.action do |g,o,a|
    puts 'c++'
  end
end

pre do |global, command, options, args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  cogfile = Cog::Config.for_project
  if !cogfile && command && command.name != :init
    puts 'No Cogfile could be found'
    false
  elsif cogfile && command && command.name == :init
    puts "A Cogfile already exists at #{cogfile.cogfile_path.inspect}"
    false
  else
    global[:cogfile] = cogfile
    true
  end
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
