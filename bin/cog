#!/usr/bin/env ruby
require 'gli'
$LOAD_PATH << File.join(File.dirname(__FILE__), '..', 'lib')
require 'cog'
require 'active_support/core_ext'
require 'fileutils'
require 'rainbow'

include GLI::App

program_desc 'This is a utility to help you write code generators.'

# version Cog::VERSION

desc 'Output more detailed information when running a command'
switch [:verbose, :v]

desc 'Set the Cogfile explicitly'
arg_name 'path'
flag :cogfile

desc 'Add cog to the project in the present working directory'
command :init do |c|

  c.action do |gopt, opt, args|
    Cog.initialize_project
  end
end

desc 'Manage project generators'
command [:generator, :gen] do |c|
  
  c.default_command :list
  
  c.desc 'List project generators'
  c.command :list do |sub|
    sub.action do |gopt, opt, args|
      x = Cog::Controllers::GeneratorController.list gopt[:v]
      puts x.join "\n" unless x.empty?
    end
  end
  
  c.desc 'Create a new project generator'
  c.arg_name 'name'
  c.command :new do |sub|

    sub.desc 'which tool to use to create the generator'
    sub.arg_name 'tool_name'
    sub.default_value 'basic'
    sub.flag :tool

    sub.action do |gopt, opt, args|
      args.each do |name|
        Cog::Controllers::GeneratorController.create name, :tool => opt[:tool], :verbose => gopt[:v]
      end
    end
  end
  
  c.desc 'Run project generators'
  c.long_desc 'Omit generator name to run all of them'
  c.arg_name 'name'
  c.command :run do |sub|

    sub.action do |gopt, opt, args|
      args = Cog::Controllers::GeneratorController.list if args.empty?
      args.each do |name|
        Cog::Controllers::GeneratorController.run name, :verbose => gopt[:v]
      end
    end
  end
end

desc 'List or create DSLs known as cog tools'
command :tool do |c|
  
  c.default_command :list
  
  c.desc 'List the available tools'
  c.command :list do |sub|
    sub.action do |gopt, opt, args|
      x = Cog::Controllers::ToolController.list gopt[:verbose]
      puts x.join "\n" unless x.empty?
    end
  end
  
  c.desc 'Create a new tool'
  c.arg_name 'tool_name'
  c.command :new do |sub|
    sub.action do |gopt, opt, args|
      args.each do |name|
        Cog::Controllers::ToolController.create name
      end
    end
  end
end

# desc 'Manage templates'
# command :template do |c|
#   
#   c.default_command :list
#   
#   c.desc 'List the available templates'
#   c.command :list do |sub|
#     sub.desc 'include templates from a given tool'
#     sub.arg_name 'tool_name'
#     sub.flag :tool
#     
#     sub.action do |gopt, opt, args|
#       x = Cog::Controllers::TemplateController.list gopt[:verbose]
#       puts x.join "\n" unless x.empty?
#     end
#   end
# end

pre do |gopt, command, opt, args|
  if gopt[:cogfile] && !File.exists?(gopt[:cogfile])
    STDERR.write "No such Cogfile at #{gopt[:cogfile]}\n"
    false
  else
    if gopt[:cogfile]
      Cog::Config.instance = Cog::Config.new gopt[:cogfile]
    end
    true
  end
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

begin
  exit run(ARGV)
rescue
  # Don't show stack traces during normal use
  raise unless ENV['COG_DEBUG'].nil? || /^(|0|false|no|off)$/i =~ ENV['COG_DEBUG']
end
