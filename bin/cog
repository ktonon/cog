#!/usr/bin/env ruby
require 'gli'
$LOAD_PATH << File.join(File.dirname(__FILE__), '..', 'lib')
require 'cog'
require 'active_support/core_ext'
require 'fileutils'

include GLI::App

program_desc 'This is a utility to help you write code generators.'

# version Cog::VERSION

desc 'Add cog to the project in the present working directory'
skips_pre
command :init do |c|

  c.action do |global_options, options, args|
    Cog.initialize_project
  end
end

desc 'Create a tool (or leave name blank to list available tools)'
arg_name 'name'
skips_pre
command :tool do |c|

  c.action do |global_options, options, args|
    if args.empty?
      puts 'Available tools:'
      puts (Cog::Tool.available.collect {|tool| "  #{tool}"}.join "\n")
    else
      args.each do |name|
        unless File.exists? name
          Cog::Tool.generate_tool name
        else
          puts "Could not create tool for '#{name}', a file or directory already exists with that name"
        end
      end
    end
  end
end

desc 'Create a generator (or leave name blank to list project generators)'
arg_name 'name'
command :generator do |c|
  
  c.desc 'which tool to use to create the generator'
  c.arg_name 'tool_name'
  c.default_value 'generic'
  c.flag :tool
  
  c.action do |global_options, options, args|
    if args.empty?
      puts 'Project generators:'
      x = Cog::Generator.available
      if x.empty?
        puts '  none found'
      else
        puts Cog::Generator.available.collect {|gen| "  #{gen}"}.join "\n"
      end
    else
      args.each do |name|
        # TODO: create the generator
      end
    end
  end
end

desc 'List supported languages'
skips_pre
command :languages do |c|

  c.action do
    puts 'c++'
  end
end

desc 'Run generators in the current project'
arg_name 'generator_name'
command :run do |c|
  
  c.action do |global_options, options, args|
    args = Cog::Generator.available if args.empty?
    args.each do |gen|
      filename = File.join Cog::Config.instance.project_generators_path, "#{gen}.rb"
      if File.exists? filename
        puts "Running generator #{gen}"
        require filename
      else
        puts "No such generator #{gen}"
      end
    end
  end
end

pre do |global_options, command, options, args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  unless Cog::Config.instance.project?
    puts 'No Cogfile could be found. Run `cog init` to prepare an existing project.'
    false
  else
    true
  end
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
