#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'stamp_version'
require 'stamp'

include GLI

program_desc 'This is a utility to help you write code generators.'

version Stamp::VERSION

desc 'Write extra information'
switch [:v,:verbose]

desc 'Add stamp to a project by generating a Stampfile in the current directory'
command :project do |c|
  c.action do |global_options, options, args|
    puts 'Created Stampfile'
    FileUtils.touch 'Stampfile'
  end
end

desc 'Create a new template'
arg_name 'NAME'
command :template do |c|
  c.action do |global_options, options, args|
    # TODO: implement me
  end
end

pre do |global, command, options, args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  path = Stamp.load_stampfile
  if !path && command && command.name != :project
    puts 'No Stampfile could be found'
    false
  elsif path && command && command.name == :project
    puts "A Stampfile already exists at #{path.inspect}"
    false
  else
    true
  end
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
